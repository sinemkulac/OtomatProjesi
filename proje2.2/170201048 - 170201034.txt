------------main.c-----------
#include "inc/hw_ints.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "stdbool.h"
#include "Button.h"
#include "inc/lm4f120h5qr.h"
#include "Lcd.h"
#include <sys/time.h>
#include <stdlib.h>
#include "string.h"
#include "time.h"

int Urunler[6][3]={{20,20,10},{1,30,50},{2,20,100},{3,15,150},{4,50,175},{5,100,200}};



int main(void) {
	int count_ceyreklik;
	int count_yarimlik;
	int count_tam;
	int toplam;
	Button1_init();
	Button2_init();
	Button3_init();
	Button4_init();
	Button5_init();
	Button6_init();
	Button7_init();
	Button8_init();
	Button9_init();
	int button_onay;
	Lcd_init();
    SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_XTAL_16MHZ | SYSCTL_OSC_MAIN);
	volatile unsigned long delay;
	volatile unsigned long delay1;
	SYSCTL_RCGC2_R |= SYSCTL_RCGC2_GPIOF;
	delay = SYSCTL_RCGC2_R;
	GPIO_PORTF_LOCK_R = 0x4C4F434B;
	GPIO_PORTF_CR_R = 0x01;
	GPIO_PORTF_DIR_R = 0x0E;
	GPIO_PORTF_PUR_R = 0x11;
	GPIO_PORTF_DEN_R = 0x1F;

	/*int fl = 1;
	do{
			for (delay1 = 0 ; delay1 < 100000 ; delay1++);
	        Lcd_Goto(1,1);
	        for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	        Lcd_Puts("Para atiniz.");
	        for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	}while(fl == 0);*/

	button_onay = GPIO_PORTF_DATA_R &0b00001;
	int c = 0, y = 0, t = 0;
	int atilan = 0;
	char at[5];
	while(button_onay != 0){
		if(Button1Pressed()) {
			GPIO_PORTF_DATA_R |= 0b00000100;
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			GPIO_PORTF_DATA_R &= ~(0b00000100);
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			c++;
		}

		else if(Button2Pressed()){
			GPIO_PORTF_DATA_R |= 0b00000100;
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			GPIO_PORTF_DATA_R &= ~(0b00000100);
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			y++;
		}

		else if(Button3Pressed()){
			GPIO_PORTF_DATA_R |= 0b00000100;
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			GPIO_PORTF_DATA_R &= ~(0b00000100);
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			t++;
		}

		else if(Button6Pressed()){
			GPIO_PORTF_DATA_R |= 0b00000100;
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			GPIO_PORTF_DATA_R &= ~(0b00000100);
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			c = 0, y = 0, t = 0;
		}
		button_onay = GPIO_PORTF_DATA_R &0b00001;
	}
	atilan = (c*25 + y*50 + t*100);
	int atilan1 = atilan;
	int yzlr = 0, onlar = 0, brlr = 0;
	yzlr = atilan % 10;
	atilan = atilan / 10;
	onlar = atilan % 10;
	atilan = atilan / 10;
	brlr = atilan % 10;
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	itoa(brlr,at,10);
	Lcd_Goto(1,1);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts(at);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts(".");
	itoa(onlar,at,10);
	Lcd_Puts(at);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	itoa(yzlr,at,10);
	Lcd_Puts(at);
    for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts(" TL Attiniz.");
	for (delay1 = 0 ; delay1 < 10000000 ; delay1++);

	Lcd_Temizle();
	for (delay1 = 0 ; delay1 < 100000 ; delay1++);
	Lcd_Goto(1,1);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts("1-Su 2-Cay 3-Bis");
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Goto(2,1);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts("4-Ciko 5-Kahve");

	int su = 0, cay = 0, biskuvi = 0, cikolata = 0, kahve = 0;
	int odenecek = 0;
	button_onay = 1;
	while(button_onay != 0){
			if(Button1Pressed()){
				GPIO_PORTF_DATA_R |= 0b00000100;
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				GPIO_PORTF_DATA_R &= ~(0b00000100);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				su++;
			}

			if(Button2Pressed()){
				GPIO_PORTF_DATA_R |= 0b00000100;
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				GPIO_PORTF_DATA_R &= ~(0b00000100);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				cay++;
			}

			if(Button3Pressed()){
				GPIO_PORTF_DATA_R |= 0b00000100;
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				GPIO_PORTF_DATA_R &= ~(0b00000100);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				biskuvi++;
			}

			if(Button4Pressed()){
				GPIO_PORTF_DATA_R |= 0b00000100;
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				GPIO_PORTF_DATA_R &= ~(0b00000100);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				cikolata++;
			}

			if(Button5Pressed()){
				GPIO_PORTF_DATA_R |= 0b00000100;
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				GPIO_PORTF_DATA_R &= ~(0b00000100);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				kahve++;
			}

			if(Button6Pressed()){
				GPIO_PORTF_DATA_R |= 0b00000100;
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				GPIO_PORTF_DATA_R &= ~(0b00000100);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				su = 0, cay = 0, biskuvi = 0, cikolata = 0, kahve = 0;
			}
			button_onay = GPIO_PORTF_DATA_R &0b00001;
	}
	odenecek = su*50 + cay*100 + biskuvi*150 + cikolata*175 + kahve*200 ;
	if(odenecek > atilan1){
		Lcd_Temizle();
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
		Lcd_Goto(1,1);
	    for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	    Lcd_Puts("Eksik para");
	    for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	    Lcd_Goto(2,1);
	    for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	    Lcd_Puts("Tekrar atiniz");
	    while(1){

	    }
	}
	/*srand(time(NULL));*/
	int hata;
	hata = ((c + y + t + su + cay + biskuvi + cikolata + kahve) % 4) + 1;
	if(hata == 2){
		Lcd_Temizle();
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
		Lcd_Goto(1,1);
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
		Lcd_Puts("Para Takildi");
		while(1){
			GPIO_PORTF_DATA_R |= 0b00000010;
		}
	}
	else if(hata != 2){
		GPIO_PORTF_DATA_R |= 0b00001000;
		for (delay1 = 0 ; delay1 < 2000000 ; delay1++);
		GPIO_PORTF_DATA_R &= ~(0b00001000);
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	}
	int urun[6]={};
	urun[1] = su;
	urun[2] = cay;
	urun[3] = biskuvi;
	urun[4] = cikolata;
	urun[5] = kahve;

	for(int a = 1 ; a < 6 ;a++){
		if (Urunler[a][1] < urun[a]){
			Lcd_Temizle();
			for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				Lcd_Goto(1,1);
				for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
				Lcd_Puts("Yeterli urun yok");
			    for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
			    while(1){

			    }
		}
	}
    int artan;
    artan = atilan1 - odenecek;
	int vc = 0;
	int vy = 0;
	int vt = 0;
	if(artan >= 100){
		vt = artan/100;
		artan = artan % 100;
	}
	if(artan >= 50){
		vy = artan/50;
		artan = artan % 50;
	}
	if(artan >=25){
		vc = artan/25;
		artan = artan % 25;
	}

	if(vt > Urunler[0][2]){
	        vt = vt - Urunler[0][2];
	        Urunler[0][2] = 0;
	        vy = vy + vt*2;
	        vt = 0;
	}
	if(vy > Urunler[0][1]){
		vy = vy - Urunler[0][1];
	    Urunler[0][1] = 0;
	    vc = vc + vy*2;
	    vy = 0;
	}
	if(vc > Urunler[0][0]){
		Lcd_Temizle();
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
		Lcd_Goto(1,1);
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
		Lcd_Puts("Kasada yeterli");
		for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
		Lcd_Goto(2,1);
	    for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	    Lcd_Puts("para yok.");
		while(1){

		}
	}
	Urunler[0][2] = Urunler[0][2] - vt + t;
	Urunler[0][1] = Urunler[0][1] - vy + y;
	Urunler[0][0] = Urunler[0][0] - vc + c;

	Lcd_Temizle();
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	int ustu;
	ustu = atilan1 - odenecek;
	char ver[5];
	yzlr = 0, onlar = 0, brlr = 0;
    yzlr = ustu % 10;
	ustu = ustu / 10;
	onlar = ustu % 10;
	ustu = ustu / 10;
	brlr = ustu % 10;
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	itoa(brlr,ver,10);
	Lcd_Goto(1,1);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts(ver);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts(".");
	itoa(onlar,ver,10);
	Lcd_Puts(ver);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	itoa(yzlr,ver,10);
	Lcd_Puts(ver);
	for (delay1 = 0 ; delay1 < 1000000 ; delay1++);
	Lcd_Puts(" TL");
	for (delay1 = 0 ; delay1 < 5000000 ; delay1++);
	Lcd_Goto(2,1);
	for (delay1 = 0 ; delay1 < 5000000 ; delay1++);
	Lcd_Puts("Para Ustu");

}
------------lcd.h-----------
#ifndef SRC_LCD_H_
#define SRC_LCD_H_

#define LCDPORT                  GPIO_PORTB_BASE
#define LCDPORTENABLE            SYSCTL_PERIPH_GPIOB
#define RS                               GPIO_PIN_0
#define E                                GPIO_PIN_1
#define D4                               GPIO_PIN_4
#define D5                               GPIO_PIN_5
#define D6                               GPIO_PIN_6
#define D7                               GPIO_PIN_7

void Lcd_Komut(unsigned char);  //Lcd ye komut göndermeye yarar
void Lcd_Temizle(void);                 //Lcd ekranýný temizler
void Lcd_Puts(char*);                   //String ifade yazdýrýr
void Lcd_Goto(char,char);               //Kursorü istenilen yere gönderir
void Lcd_init(void);                    //Lcd baþlangýç ayarlarý
void Lcd_Putch(unsigned char);  //Tek karekter yazdýrýr

#endif /* LCD_H_ */
------------button.c-----------
#include "inc/hw_ints.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "Button.h"
#include "inc/lm4f120h5qr.h"
void Button1_init(void){
	volatile unsigned long delay;
		  SYSCTL_RCGC2_R |= 0x00000008;     // 1) activate clock for Port D
		  delay = SYSCTL_RCGC2_R;

		  GPIO_PORTD_AMSEL_R &= ~0x40;      // 3) disable analog on PD6
		  GPIO_PORTD_PCTL_R &= ~0x0F000000; // 4) PCTL GPIO on
		  GPIO_PORTD_DIR_R &= ~0x40;        // 5) direction  input
		  GPIO_PORTD_AFSEL_R &= ~0x40;      // 6) regular port function
		  GPIO_PORTD_DEN_R |= 0x40;         // 7) enable  digital port
 }
void Button2_init(void){
	  volatile unsigned long delay;
	  SYSCTL_RCGC2_R |= 0x00000008;     // 1) activate clock for Port D
	  delay = SYSCTL_RCGC2_R;

	  GPIO_PORTD_AMSEL_R &= ~0x02;      // 3) disable analog on PD1
	  GPIO_PORTD_PCTL_R &= ~0x000000F0; // 4) PCTL GPIO on PD1
	  GPIO_PORTD_DIR_R &= ~0x02;        // 5) direction PD1 input
	  GPIO_PORTD_AFSEL_R &= ~0x02;      // 6) PD1 regular port function
	  GPIO_PORTD_DEN_R |= 0x02;         // 7) enable PD1 digital port
 }

void Button3_init(void){
	  volatile unsigned long delay;
	  SYSCTL_RCGC2_R |= 0x00000008;     // 1) activate clock for Port D
	  delay = SYSCTL_RCGC2_R;

	  GPIO_PORTD_AMSEL_R &= ~0x04;      // 3) disable analog on PD2
	  GPIO_PORTD_PCTL_R &= ~0x00000F00; // 4) PCTL GPIO on PD2
	  GPIO_PORTD_DIR_R &= ~0x04;        // 5) direction PD2 input
	  GPIO_PORTD_AFSEL_R &= ~0x04;      // 6) PD2 regular port function
	  GPIO_PORTD_DEN_R |= 0x04;         // 7) enable PD2 digital port
 }

void  Button4_init(void){
	  volatile unsigned long delay;
	  SYSCTL_RCGC2_R |= 0x00000008;     // 1) activate clock for Port D
	  delay = SYSCTL_RCGC2_R;

	  GPIO_PORTD_AMSEL_R &= ~0x08;      // 3) disable analog on PD3
	  GPIO_PORTD_PCTL_R &= ~0x0000F000; // 4) PCTL GPIO on PD3
	  GPIO_PORTD_DIR_R &= ~0x08;        // 5) direction PD3 input
	  GPIO_PORTD_AFSEL_R &= ~0x08;      // 6) PD3 regular port function
	  GPIO_PORTD_DEN_R |= 0x08;         // 7) enable PD3 digital port
 }



void Button5_init(void){
	  volatile unsigned long delay;
	  SYSCTL_RCGC2_R |= 0x00000004;     // 1) activate clock for Port C
	  delay = SYSCTL_RCGC2_R;

	  GPIO_PORTC_AMSEL_R &= ~0x010;      // 3) disable analog on PC4
	  GPIO_PORTC_PCTL_R &= ~0x000F0000; // 4) PCTL GPIO on PC4
	  GPIO_PORTC_DIR_R &= ~0x10;        // 5) direction PC4 input
	  GPIO_PORTC_AFSEL_R &= ~0x10;      // 6) PC4 regular port function
	  GPIO_PORTC_DEN_R |= 0x10;         // 7) enable PC4 digital port
  }
void Button6_init(void){
	  volatile unsigned long delay;
		  SYSCTL_RCGC2_R |= 0x00000004;     // 1) activate clock for Port C
		  delay = SYSCTL_RCGC2_R;

		  GPIO_PORTC_AMSEL_R &= ~0x20;      // 3) disable analog on PC5
		  GPIO_PORTC_PCTL_R &= ~0x00F00000; // 4) PCTL GPIO on PC5
		  GPIO_PORTC_DIR_R &= ~0x20;        // 5) direction PC5 input
		  GPIO_PORTC_AFSEL_R &= ~0x20;      // 6) PC5 regular port function
		  GPIO_PORTC_DEN_R |= 0x20;         // 7) enable PC5 digital port
}
void Button7_init(void){
	  	  volatile unsigned long delay;
	  	SYSCTL_RCGC2_R |= 0x00000004;     // 1) activate clock for Port C
	  	delay = SYSCTL_RCGC2_R;
	  	GPIO_PORTC_AMSEL_R &= ~0x80;      // 3) disable analog on PC6
	  	GPIO_PORTC_PCTL_R &= ~0xF0000000; // 4) PCTL GPIO on
	  	GPIO_PORTC_DIR_R &= ~0x80;        // 5) direction  input
	  	GPIO_PORTC_AFSEL_R &= ~0x80;      // 6)  regular port function
	  	GPIO_PORTC_DEN_R |= 0x80;         // 7) enable digital port

}
void Button8_init(void){
	 	  volatile unsigned long delay;
		  SYSCTL_RCGC2_R |= 0x00000001;      // 1) activate clock for Port A
		  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
		                                    // 2) no need to unlock
		  GPIO_PORTA_AMSEL_R &= ~0x20;      // 4) disable analog function on PA5
		  GPIO_PORTA_PCTL_R &= ~0x00F00000; // 3) regular GPIO

		  GPIO_PORTA_DIR_R |= 0x20;         // 5) set direction to output
		  GPIO_PORTA_AFSEL_R &= ~0x20;      // 6) regular port function
		  GPIO_PORTA_DEN_R |= 0x20;         // 7) enable digital port
}
void Button9_init(void){
	  volatile unsigned long delay;
		  SYSCTL_RCGC2_R |= 0x00000001;      // 1) activate clock for Port A
		  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
		                                    // 2) no need to unlock
		  GPIO_PORTA_AMSEL_R &= ~0x40;      // 4) disable analog function on PA6
		  GPIO_PORTA_PCTL_R &= ~0x0F000000; // 3) regular GPIO

		  GPIO_PORTA_DIR_R |= 0x40;         // 5) set direction to output
		  GPIO_PORTA_AFSEL_R &= ~0x40;      // 6) regular port function
		  GPIO_PORTA_DEN_R |= 0x40;         // 7) enable digital port
}
/*




*/
unsigned long Button1Pressed(){return GPIO_PORTD_DATA_R&0x40;}
unsigned long Button2Pressed(){return GPIO_PORTD_DATA_R&0x02;}
unsigned long Button3Pressed(){return GPIO_PORTD_DATA_R&0x04;}
unsigned long Button4Pressed(){return GPIO_PORTD_DATA_R&0x08;}
unsigned long Button5Pressed(){return GPIO_PORTC_DATA_R&0x10;}

unsigned long Button6Pressed(){return GPIO_PORTC_DATA_R&0x20;}
unsigned long Button7Pressed(){return GPIO_PORTC_DATA_R&0x80;}

unsigned long Button8Pressed(){return GPIO_PORTA_DATA_R&0x20;}
unsigned long Button9Pressed(){return GPIO_PORTA_DATA_R&0x40;}
------------button.h-------------
#ifndef BUTTON_H_
#define BUTTON_H_


#define PD6   (GPIO_PORTD_DATA_R&0x40) //Button1
#define PD1   (GPIO_PORTD_DATA_R&0x02) //Button2
#define PD2   (GPIO_PORTD_DATA_R&0x04) //Button3
#define PD3   (GPIO_PORTD_DATA_R&0x08) //Button4
#define PC4  (GPIO_PORTC_DATA_R&0x10)  //Button5
#define PC5   (GPIO_PORTC_DATA_R&0x20) //Button6
#define PC7   (GPIO_PORTC_DATA_R&0x80) //Button7
#define PA5  (GPIO_PORTA_DATA_R&0x20) //Button8
#define PA6   (GPIO_PORTA_DATA_R&0x40) //Button9

unsigned long Button1Pressed(void);
unsigned long Button2Pressed(void);
unsigned long Button3Pressed(void);
unsigned long Button4Pressed(void);
unsigned long Button5Pressed(void);
unsigned long Button6Pressed(void);
unsigned long Button7Pressed(void);

unsigned long Button8Pressed(void);
unsigned long Button9Pressed(void);

#endif
------------lcd.c-------------
#include "inc/hw_ints.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "Lcd.h"
volatile unsigned long delay1;
void Lcd_init() {

        SysCtlPeripheralEnable(LCDPORTENABLE);
        GPIOPinTypeGPIOOutput(LCDPORT, 0xFF);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, RS,  0x00 );

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x30 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x30 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x30 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x20 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        Lcd_Komut(0x28);
        Lcd_Komut(0xC0);
        Lcd_Komut(0x06);
        Lcd_Komut(0x80);
        Lcd_Komut(0x28);
        Lcd_Komut(0x0f);
        Lcd_Temizle();

}
void Lcd_Komut(unsigned char c) {

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (c & 0xf0) );
        GPIOPinWrite(LCDPORT, RS, 0x00);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(50000);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (c & 0x0f) << 4 );
        GPIOPinWrite(LCDPORT, RS, 0x00);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

}

void Lcd_Putch(unsigned char d) {

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (d & 0xf0) );
        GPIOPinWrite(LCDPORT, RS, 0x01);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (d & 0x0f) << 4 );
        GPIOPinWrite(LCDPORT, RS, 0x01);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

}
void Lcd_Goto(char x, char y){

        if(x==1)
                Lcd_Komut(0x80+((y-1)%16));
        else
                Lcd_Komut(0xC0+((y-1)%16));
}

void Lcd_Temizle(void){
	Lcd_Goto(1,1);
	for (delay1 = 0 ; delay1 < 100000 ; delay1++);
    Lcd_Puts("                ");
	for (delay1 = 0 ; delay1 < 100000 ; delay1++);
	Lcd_Goto(2,1);
	for (delay1 = 0 ; delay1 < 100000 ; delay1++);
    Lcd_Puts("                ");
    for (delay1 = 0 ; delay1 < 100000 ; delay1++);
	/*
        Lcd_Komut(0x01);
        SysCtlDelay(10);
        */
}

void Lcd_Puts( char* s){

        while(*s)
                Lcd_Putch(*s++);
}

